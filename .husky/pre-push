#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-push hook for final validation before pushing to remote
echo "üöÄ Running pre-push validation..."

# Navigate to project root
cd "$(git rev-parse --show-toplevel)"

# Get current branch
current_branch=$(git branch --show-current)
echo "üìç Current branch: $current_branch"

# Check if pushing to main/master branch
if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then
  echo "‚ö†Ô∏è  Pushing to $current_branch branch. Running comprehensive checks..."
  
  # Run full test suite for main branch
  if [ -f "packages/site/package.json" ]; then
    cd packages/site
    
    echo "üß™ Running full test suite..."
    if ! pnpm test:local-ci; then
      echo "‚ùå Full test suite failed. Cannot push to $current_branch."
      exit 1
    fi
    
    echo "üèóÔ∏è  Running production build test..."
    if ! pnpm build; then
      echo "‚ùå Production build failed. Cannot push to $current_branch."
      exit 1
    fi
    
    cd ../..
  fi
else
  echo "üìù Feature branch detected. Running basic validation..."
  
  # Run basic checks for feature branches
  if [ -f "packages/site/package.json" ]; then
    cd packages/site
    
    # Type checking
    echo "üìò Running TypeScript check..."
    if ! pnpm typecheck; then
      echo "‚ùå TypeScript errors found. Please fix before pushing."
      exit 1
    fi
    
    # Linting
    echo "üîß Running linter..."
    if ! pnpm lint; then
      echo "‚ùå Linting errors found. Please fix before pushing."
      exit 1
    fi
    
    # Unit tests only
    echo "üß™ Running unit tests..."
    if ! pnpm test:unit; then
      echo "‚ùå Unit tests failed. Please fix before pushing."
      exit 1
    fi
    
    cd ../..
  fi
fi

# Check for secrets in committed files
echo "üîí Scanning for potential secrets..."
SECRET_PATTERNS="(password|secret|key|token|api_key|private_key|auth)"
if git log --oneline -10 | xargs git show --name-only | xargs grep -l -i "$SECRET_PATTERNS" 2>/dev/null | grep -v node_modules | head -5; then
  echo "‚ö†Ô∏è  Potential secrets detected in recent commits. Please review:"
  echo "   - API keys or tokens"
  echo "   - Passwords or secrets"
  echo "   - Private keys"
  echo ""
  echo "‚ùì Continue anyway? (y/N)"
  read -r response
  if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
    echo "‚ùå Push cancelled by user."
    exit 1
  fi
fi

# Check commit history for quality
echo "üìú Checking recent commit history..."
RECENT_COMMITS=$(git log --oneline -5 --pretty=format:"%s")
echo "Recent commits:"
echo "$RECENT_COMMITS" | sed 's/^/   /'

# Warn about fixup/squash commits
if echo "$RECENT_COMMITS" | grep -qi "fixup\|squash"; then
  echo "‚ö†Ô∏è  Fixup/squash commits detected. Consider rebasing before pushing."
fi

# Check branch is up to date with remote (if remote exists)
if git ls-remote --exit-code origin >/dev/null 2>&1; then
  echo "üì° Checking if branch is up to date with remote..."
  git fetch origin "$current_branch" 2>/dev/null || echo "   No remote branch found."
  
  if git merge-base --is-ancestor HEAD origin/"$current_branch" 2>/dev/null; then
    echo "‚úÖ Branch is up to date with remote."
  else
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/"$current_branch" 2>/dev/null || echo "")
    
    if [ -n "$REMOTE" ] && [ "$LOCAL" != "$REMOTE" ]; then
      echo "‚ö†Ô∏è  Branch may be out of sync with remote. Consider pulling latest changes."
      echo "‚ùì Continue anyway? (y/N)"
      read -r response
      if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "‚ùå Push cancelled by user."
        exit 1
      fi
    fi
  fi
fi

# Final check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
  echo "‚ö†Ô∏è  Uncommitted changes detected:"
  git status --porcelain
  echo "‚ùì Continue pushing anyway? (y/N)"
  read -r response
  if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
    echo "‚ùå Push cancelled by user."
    exit 1
  fi
fi

echo "‚úÖ All pre-push checks passed! Pushing to remote..."
exit 0