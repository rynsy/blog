# Multi-stage Dockerfile for Production Testing
# This creates a production-like environment for catching deployment issues

# Stage 1: Build the application
FROM node:18-bookworm-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    git \
    python3 \
    python3-pip \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@8

# Copy package files
COPY package*.json pnpm-*.yaml ./
COPY packages/site/package.json ./packages/site/
COPY packages/tests/package.json ./packages/tests/

# Install all dependencies (including dev dependencies for build)
RUN pnpm install --force

# Copy source code
COPY . .

# Build the static site
ENV NODE_ENV=production
ENV GATSBY_TELEMETRY_DISABLED=1
ENV GATSBY_CPU_COUNT=1
RUN pnpm run build

# Stage 2: Production server with nginx
FROM nginx:alpine as production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built static files
COPY --from=builder /app/packages/site/public /usr/share/nginx/html

# Copy custom nginx configuration
COPY test-fixtures/production-nginx.conf /etc/nginx/conf.d/default.conf

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set ownership and permissions
RUN chown -R nextjs:nodejs /usr/share/nginx/html && \
    chown -R nextjs:nodejs /var/cache/nginx && \
    chown -R nextjs:nodejs /var/log/nginx && \
    chown -R nextjs:nodejs /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nextjs:nodejs /var/run/nginx.pid

USER nextjs

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]